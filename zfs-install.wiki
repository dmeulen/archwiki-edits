[[Category:Getting and installing Arch]]
{{Article summary start}}
{{Article summary text|This article describes the necassary procedures for installing Arch Linux onto a ZFS root filesystem.}}
{{Article summary heading|Related}}
{{Article summary wiki|ZFS}}
{{Article summary wiki|ZFS on FUSE}}
{{Article summary end}}

The [[Wikipedia:ZFS|Zettabyte File System (ZFS)]] is an advanced [[Wikipedia:Copy-on-write|copy-on-write]] filesystem designed to preserve data integrity from a multitude of possible corruption scenarios as well as provide simple administration features. ZFS makes disk administration effortless with support ZFS storage pools (zpools) and automatic mount handling. First released in 2005 for Solaris OS, ZFS has since become the flag bearer for next generation filesystems.

ZFS was first developed and released by Sun (now owned by Oracle) as [[Wikipedia:Open source software|Open Source Software]] licensed under the [[Wikipedia:Common Development and Distribution License|Common Development and Distribution License]] (CDDL) which is famously [http://arstechnica.com/information-technology/2010/06/uptake-of-native-linux-zfs-port-hampered-by-license-conflict/ incompatible with the GNU Public License]. This incompatibility prevents ZFS from being merged into the mainline kernel, and generally presents some obstacles for users that want to use ZFS in Linux.

[http://zfsonlinux.org/ ZFSonLinux.org] is a project funded by the [https://www.llnl.gov/ Lawrence Livermore National Laboratory] to develop a native Linux kernel module for its massive storage requirements and super computers.

==Notes before installation==

* This guide uses the unofficial archzfs repository hosted at http://demizerone.com/archzfs. This repository is maintained by Jesus Alvarez and is signed with his PGP key: [http://pgp.mit.edu:11371/pks/lookup?op=vindex&search=0x5E1ABF240EE7A126 0EE7A126].

* The ZFS packages are tied to the kernel version they were built against. This means it will not be possible to perform kernel updates until new packages (or package sources) are released by the ZFS package maintainer.

* This guide currently targets UEFI compatible systems. It should be relatively easy to install ZFS on bios compatible systems using this guide. The sections for BIOS installations exist in this article as stubs to allow easy contributions of content.

==Boot from the installation media==

If you have an existing Arch Linux installation handy, it is possible to create a custom archiso installation media with the ZFS tools pre-installed by following [http://kroweer.wordpress.com/2011/09/07/creating-a-custom-arch-linux-live-usb/ this guide].

Otherwise, you will need the latest archiso installation media burned to a CD or a USB key. If you are installing onto a UEFI system, see [[Unified Extensible Firmware Interface#Create UEFI bootable USB from ISO]] for creating UEFI compatible installation media.

==Setup pacman==

Activate the required network connection and then edit {{ic|/etc/pacman.d/mirrorlist}} and configure the mirrors for pacman to use.  Once that is done, edit {{ic|/etc/pacman.conf}} and add the archzfs repository:

{{hc|# nano /etc/pacman.conf|<nowiki>
[archzfs]
Server = http://demizerone.com/archzfs/archiso/$arch</nowiki>
}}

Next, add the archzfs maintainer's PGP key to the local trust:

    # pacman-key -r 0EE7A126
    # pacman-key --lsign-key 0EE7A126

Finally, update the pacman databases,

    # pacman -Syy

==Install needed packages==

This is also the best time to install your favorite text editor, otherwise nano will have to be used.

    # pacman -S archzfs dosfstools gptfdisk vim

==Partition the destination drive==

===UEFI systems===

Use the cgdisk partition utility and create a GPT partition table:

   Part     Size   Type
   ====     =====  =============
      1     512M   EFI (ef00)
      2     512M   Ext4 (8200)
      2     XXXG   Solaris Root (bf00)

{{Note|The EFI partion will be formatted to FAT32 and contain the UEFI boot loader. The Ext4 partition will contain the boot partition and kernel images.}}

{{Note|The filesystem type codes for cgdisk are indicated in the parenthesis after the filesystem name.}}

{{Warning|The EFI partition must be at least 512MB specified by the UEFI standard.}}

===BIOS systems===

This section has not been written yet.

==Format the destination disk==

===UEFI systems===

Format the EFI partition to FAT32

    mkfs.vfat -F 32 /dev/sda1 -n EFIBOOT

Format the Ext4 boot partition

    mkfs.ext4 /dev/sda2 -L BOOT

===BIOS systems===

This section has not been written yet.

==Setup the ZFS filesystem==

First, make sure the ZFS modules are loaded,

    # modprobe zfs

===Create the root zpool===

    # zpool create rpool /dev/disk/by-id/<id-to-partition>

{{Warning|Always use id names when working with ZFS, otherwise import errors will occur.}}

===Create the root filesystem===

    # zfs create rpool/ROOT

create the descendant file system that will hold the installation:

    # zfs create rpool/ROOT/arch

We will set the mount points after we have created the filesystems so that they are not mounted automatically by ZFS.

If so desired, sub-filesystem mount points such as /home and /root can be created with the following commands:

    # zfs create rpool/HOME
    # zfs create rpool/HOME/root

For safety, unmount all zfs filesystems if they are mounted:

    # zfs umount -a

===Configure the root filesystem===

Now it is time to set the mount point of the root filesystem:

    # zfs set mountpoint=/ rpool/ROOT/arch

and optionally, any sub-filesystems:

    # zfs set mountpoint=/home rpool/HOME
    # zfs set mountpoint=/root rpool/HOME/root

Set the bootfs property on the descendant root filesystem so the boot loader knows where to find the operating system.

    # zpool set bootfs=rpool/ROOT/arch rpool

Export the pool,

    # zpool export rpool

{{Warning|Don't skip this, otherwise you will be required to use -f when importing your pools. This unloads the imported pool.}}

Finally, re-import the pool,

    # zpool import -d /dev/disk/by-id -R /mnt rpool

{{Note|"-d" is not the actual device id, but the /dev/by-id directory containing the symlinks.}}

If there is an error in this step, you can export the pool to redo the command. The ZFS filesystem is now ready to use.

==Mount the boot partitions==

===UEFI systems===

    # mkdir /mnt/boot
    # mount /dev/sda2 /mnt/boot
    # mkdir /mnt/boot/efi
    # mount /dev/sda1 /mnt/boot/efi

===BIOS systems===

This section has not been written yet.

==Install and configure the Arch Linux installation==

Install the base packages,

    # pacstrap -i /mnt base base-devel archzfs sudo gnupg vim

Generate the fstab,

    # genfstab -U -p /mnt >> /mnt/etc/fstab

Open fstab to edit contents,

    # nano /mnt/etc/fstab

{{Note|Delete all the lines except for the boot partion. ZFS auto mounts its own partitions.}}

If installing on a UEFI system, you will need to load the efivars kernel module before chrooting into the installation:

    # modprobe efivars

Chroot into the installation

    # arch-chroot /mnt /bin/bash

Next, follow the [[Beginners' Guide]] from the "Locale" section to the "Configure Pacman Section".

Edit {{ic|pacman.conf}} and add the archzfs repository.

Update the pacman database

    # pacman -Syy

Re-create the initramfs, edit mkinitcpio.conf and add {{ic|zfs}} before filesystems.  Remove fsck and then regenerate the initramfs:

    # mkinitcpio -p linux

Finally, set root password and add a regular user.

==Setup the bootloader==

===UEFI systems===

Use EFISTUB and rEIFnd for the UEFI boot loader. See [[Beginners' Guide#For UEFI motherboards]].

===BIOS systems===

This section has not been written yet.

==Unmount and restart==

This is it, we are done!

    # exit
    # umount /mnt/boot
    # zfs umount -a
    # zpool export rpool
    # reboot

{{Warning|If you do not properly export the zpool, the pool will refuse to import in the ramdisk environment and you will be stuck at the busybox terminal.}}

==Troubleshooting==

If the new installation does not boot because the zpool cannot be imported, you will need to chroot into the installation and properly export the zpool. See [[zfs#Emergency chroot repair with archzfs]].

Once inside the chroot environment, load the ZFS module and force import the zpool,

    # zpool import -a -f

now export the pool:

    # zpool export <pool>

To see your available pools, use,

    # zpool status

It is necessary to export a pool because of the way ZFS uses the hostid to track the system the zpool was created on. The hostid is generated partly based on your network setup. During the installation in the archiso your network configuration could be different generating a different hostid than the one contained in your new installation. Once the zfs filesystem is exported and then re-imported in the new installation, the hostid is reset. See [http://osdir.com/ml/zfs-discuss/2011-06/msg00227.html Re: Howto zpool import/export automatically? - msg#00227].

==See also==

* [https://github.com/dajhorn/pkg-zfs/wiki/HOWTO-install-Ubuntu-to-a-Native-ZFS-Root-Filesystem HOWTO install Ubuntu to a Native ZFS Root]
* [http://lildude.co.uk/zfs-cheatsheet ZFS Cheatsheet]
